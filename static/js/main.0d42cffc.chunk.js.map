{"version":3,"sources":["question/Generator.js","item/index.js","question/index.js","options/index.js","loading/index.js","messages/index.js","quiz/index.js","App.js","reportWebVitals.js","index.js"],"names":["randomSort","array","randomized","sort","Math","round","random","itemsWithComponents","Items","items","filter","x","components","length","getQuestion","n","index","floor","item","answers","i","includes","id","fillers","slice","options","console","debug","sizeClass","md","sm","lg","Item","undefined","onClick","size","className","src","file","alt","name","Question","selection","onSelectionRemove","numberOfAnswers","recipe","Array","keys","map","Options","onOptionClick","o","Loading","class","Messages","visible","isCorrect","quizStateEnum","Quiz","useState","question","setQuestion","setSelection","checkWin","setcheckWin","useEffect","answerIds","push","sel","indexOf","splice","setTimeout","prev","option","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+3qBAIMA,EAAa,SAACC,GAClB,IAAIC,EAAU,YAAOD,GAIrB,OAFAC,EAAWC,MAAK,kBAAMC,KAAKC,MAAM,EAAAD,KAAKE,SAAsB,MAErDJ,GAKHK,EAAsBC,EAAMC,MAAMC,QAAO,SAACC,GAAD,uBAAOA,EAAEC,kBAAT,aAAO,EAAcC,UAkBrDC,EAhBK,WAClB,IALiBb,EAAOc,EAKlBC,EAAQZ,KAAKa,MAAMb,KAAKE,SAAWC,EAAoBM,QACvDK,EAAOX,EAAoBS,GAC3BG,EAAUX,EAAMC,MAAMC,QAAO,SAACU,GAAD,OAAOF,EAAKN,WAAWS,SAASD,EAAEE,OAC/DC,GARWtB,EASfO,EAAMC,MAAMC,QAAO,SAACU,GAAD,OAAOA,EAAEE,KAAOJ,EAAKI,MATlBP,EAVF,EAoBFI,EAAQN,OAVEb,EAAWC,GAAOuB,MAAM,EAAGT,IAiBzD,OAJAG,EAAKO,QAAUzB,EAAW,GAAD,mBAAKmB,GAAL,YAAiBI,KAE1CG,QAAQC,MAAM,4BAA6BT,GAEpCA,GC3BHU,G,MAAY,CAChBC,GAAI,GACJC,GAAI,cACJC,GAAI,gBAwBSC,EArBF,SAAC,GAAD,QACXd,YADW,WACJe,EADI,MAEXC,eAFW,WAEDD,EAFC,MAGXE,YAHW,MAGJ,KAHI,MAIXC,iBAJW,WAICH,EAJD,SAMX,sBACEG,UACE,QACClB,EAAO,GAAK,WACZiB,EAAO,IAAMP,EAAUO,GAAQ,KAC/BC,EAAY,IAAMA,EAAY,IAEjCF,QAASA,EAPX,SASGhB,GACC,qBAAKkB,UAAU,WAAWC,IAAG,iBAAYnB,EAAKoB,MAAQC,IAAKrB,EAAKsB,UCGvDC,G,MArBE,SAAC,GAA6D,IAFhE1B,EAEKG,EAA0D,EAA1DA,KAA0D,IAApDwB,iBAAoD,MAAxC,GAAwC,MAApCC,yBAAoC,WAAhBV,EAAgB,EACtEW,EAAkB1B,EAAKN,WAAWC,QAAUK,EAAK2B,OAAS,EAAI,GAEpE,OACE,sBAAKT,UAAU,WAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAMlB,KAAMA,EAAMiB,KAAK,SAEzB,qBAAKC,UAAU,qBAAf,UAVSrB,EAWA6B,EAXD,YAAWE,MAAM/B,GAAGgC,SAWFC,KAAI,SAAC5B,GAAD,OAC1B,cAAC,EAAD,CAEEF,KAAMwB,EAAUtB,GAChBc,QAAS,kBAAMS,EAAkBvB,KAF5BA,a,OCCF6B,G,MAdC,SAAC,GAAD,IAAGxB,EAAH,EAAGA,QAASyB,EAAZ,EAAYA,cAAZ,OACd,sBAAKd,UAAU,UAAf,UACGX,EAAQuB,KAAI,SAACG,GAAD,OACX,cAAC,EAAD,CAAiBjC,KAAMiC,EAAGjB,QAAS,kBAAMgB,EAAcC,KAA5CA,EAAE7B,OAGf,cAAC,EAAD,CACEc,UAAU,iBACVlB,KAAM2B,EACNX,QAAS,kBAAMgB,EAAcL,WCApBO,G,kBAXC,kBACd,qBAAKC,MAAM,UAAX,SACE,sBAAKA,MAAM,eAAX,UACE,wBACA,wBACA,wBACA,+BCYSC,EAjBE,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC3B,OAAKD,EAGH,qBAAKnB,UAAU,UAAf,SACGoB,EACC,gCACE,qBAAKpB,UAAU,kBAAf,qBACA,cAAC,EAAD,OAGF,qBAAKA,UAAU,oBAAf,yBAVe,MCGjBqB,EACM,EADNA,EAEO,EAFPA,EAGK,EAoHIC,EAjHF,WAAM,MAEeC,mBAAS7C,KAFxB,mBAEV8C,EAFU,KAEAC,EAFA,OAIiBF,mBAAS,IAJ1B,mBAIVjB,EAJU,KAICoB,EAJD,OAMeH,mBAASF,GANxB,mBAMVM,EANU,KAMAC,EANA,KASbT,EAAUQ,EAAW,EACrBP,EAAyB,IAAbO,EAQVnB,EACJgB,EAAShD,WAAWC,QAAU+C,EAASf,OAAS,EAAI,GA2CtDoB,qBAzCoB,WAElB,GAAIvB,EAAU7B,SAAW+B,GAAmBF,EAAUrB,cAASY,GAC7D+B,EAAYP,OADd,CAMA,IAAIS,EAAS,YAAON,EAAShD,YAGzBgD,EAASf,QACXqB,EAAUC,KAAK,UAZO,oBAgBRzB,GAhBQ,IAgBxB,2BAA2B,CAAC,IAAnB0B,EAAkB,QAEnBpD,EAAQkD,EAAUG,QAAQD,EAAI9C,IAGpC,IAAe,IAAXN,EAEF,YADAgD,EAAYP,GAKdS,EAAUI,OAAOtD,EAAO,IA3BF,8BAgCxBgD,EACuB,IAArBE,EAAUrD,OAAe4C,EAAwBA,GAE1B,IAArBS,EAAUrD,QACZ0D,YAAW,WA5CbV,EAAY/C,KACZgD,EAAa,MA6CR,QAGgB,CACrBpB,EACAE,EACAgB,EAAShD,WACTgD,EAASf,SAiCX,OACE,sBAAKT,UAAU,OAAf,UACE,cAAC,EAAD,CACElB,KAAM0C,EACNlB,UAAWA,EACXC,kBAXkB,SAACvB,GACvB0C,GAAa,SAACU,GACZ,MAAM,GAAN,mBAAWA,EAAKhD,MAAM,EAAGJ,IAAzB,MAA6Ba,GAA7B,YAA2CuC,EAAKhD,MAAMJ,EAAI,WAW1D,uBACA,cAAC,EAAD,CAASK,QAASmC,EAASnC,QAASyB,cAtCnB,SAACuB,GAEpB,GAAI/B,EAAU7B,SAAW+B,EAmBzBkB,GAAa,SAACU,GAAD,4BAAcA,GAAd,CAAoBC,YAjB/B,IAFyC,IAAD,WAE/BrD,GAEP,QAAqBa,IAAjBS,EAAUtB,GAOZ,OANA0C,GAAa,SAACU,GAAD,4BACRA,EAAKhD,MAAM,EAAGJ,IADN,CAEXqD,GAFW,YAGRD,EAAKhD,MAAMJ,EAAI,QAGd,CAAN,WATKA,EAAI,EAAGA,EAAIsB,EAAU7B,OAAQO,IAAK,CAAC,IAAD,IAAlCA,GAAkC,sCAmC3C,cAAC,EAAD,CAAUmC,QAASA,EAASC,UAAWA,QChH9BkB,EANH,kBACR,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0d42cffc.chunk.js","sourcesContent":["import Items from \"../items.json\";\n\nconst numberOfOptions = 6;\n\nconst randomSort = (array) => {\n  let randomized = [...array];\n\n  randomized.sort(() => Math.round(Math.random() * (1 + 1) + -1));\n\n  return randomized;\n};\n\nconst getRandom = (array, n) => randomSort(array).slice(0, n);\n\nconst itemsWithComponents = Items.items.filter((x) => x.components?.length);\n\nconst getQuestion = () => {\n  const index = Math.floor(Math.random() * itemsWithComponents.length);\n  const item = itemsWithComponents[index];\n  const answers = Items.items.filter((i) => item.components.includes(i.id));\n  const fillers = getRandom(\n    Items.items.filter((i) => i.id !== item.id),\n    numberOfOptions - answers.length\n  );\n\n  item.options = randomSort([...answers, ...fillers]);\n\n  console.debug(\"Random question generated\", item);\n\n  return item;\n};\n\nexport default getQuestion;\n","import \"./item.css\";\n\nconst sizeClass = {\n  md: \"\",\n  sm: \"item--small\",\n  lg: \"item--large\",\n};\n\nconst Item = ({\n  item = undefined,\n  onClick = undefined,\n  size = \"md\",\n  className = undefined,\n}) => (\n  <span\n    className={\n      \"item\" +\n      (item ? \"\" : \" blank\") +\n      (size ? \" \" + sizeClass[size] : \"\") +\n      (className ? \" \" + className : \"\")\n    }\n    onClick={onClick}\n  >\n    {item && (\n      <img className=\"item-img\" src={`images/${item.file}`} alt={item.name} />\n    )}\n  </span>\n);\n\nexport default Item;\n","import Item from \"../item\";\nimport \"./question.css\";\n\n// create an array of numbers from 0 to (n-1)\nconst range = (n) => [...Array(n).keys()];\n\nconst Question = ({ item, selection = [], onSelectionRemove = undefined }) => {\n  const numberOfAnswers = item.components.length + (item.recipe ? 1 : 0);\n\n  return (\n    <div className=\"question\">\n      <div className=\"question-target\">\n        <Item item={item} size=\"lg\" />\n      </div>\n      <div className=\"question-selection\">\n        {range(numberOfAnswers).map((i) => (\n          <Item\n            key={i}\n            item={selection[i]}\n            onClick={() => onSelectionRemove(i)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Question;\n","import Item from \"../item\";\nimport recipe from \"./recipe.json\";\nimport \"./options.css\";\n\nconst Options = ({ options, onOptionClick }) => (\n  <div className=\"options\">\n    {options.map((o) => (\n      <Item key={o.id} item={o} onClick={() => onOptionClick(o)} />\n    ))}\n\n    <Item\n      className=\"options-recipe\"\n      item={recipe}\n      onClick={() => onOptionClick(recipe)}\n    />\n  </div>\n);\n\nexport default Options;\n","import \"./loading.css\";\n\nconst Loading = () => (\n  <div class=\"loading\">\n    <div class=\"lds-ellipsis\">\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n  </div>\n);\n\nexport default Loading;\n","import \"./messages.css\";\nimport Loading from \"../loading/index.js\";\n\nconst Messages = ({ visible, isCorrect }) => {\n  if (!visible) return null;\n\n  return (\n    <div className=\"message\">\n      {isCorrect ? (\n        <div>\n          <div className=\"correct-message\">correct</div>\n          <Loading />\n        </div>\n      ) : (\n        <div className=\"incorrect-message\">incorrect</div>\n      )}\n    </div>\n  );\n};\n\nexport default Messages;\n","import { useState, useEffect } from \"react\";\nimport getQuestion from \"../question/Generator\";\nimport Question from \"../question\";\nimport Options from \"../options\";\nimport \"./quiz.css\";\nimport Messages from \"../messages\";\n\nconst quizStateEnum = {\n  noAnswer: 0,\n  incorrect: 1,\n  correct: 2,\n};\n\nconst Quiz = () => {\n  // current item/question\n  const [question, setQuestion] = useState(getQuestion());\n  // the user's submitted answer array\n  const [selection, setSelection] = useState([]);\n  // whether or not the user's answer is correct\n  const [checkWin, setcheckWin] = useState(quizStateEnum.noAnswer);\n\n  // variables used to check is incorrect message should display\n  let visible = checkWin > 0;\n  let isCorrect = checkWin === 2;\n\n  const newQuestion = () => {\n    setQuestion(getQuestion());\n    setSelection([]);\n  };\n\n  // the number of components that make up the answer, plus 1 if the recipe is required\n  const numberOfAnswers =\n    question.components.length + (question.recipe ? 1 : 0);\n\n  const checkAnswer = () => {\n    // if they aren't done answering the question, reset state\n    if (selection.length !== numberOfAnswers || selection.includes(undefined)) {\n      setcheckWin(quizStateEnum.noAnswer);\n      return;\n    }\n\n    // get a list of the expected ids\n    let answerIds = [...question.components];\n\n    // add the recipe's id if required\n    if (question.recipe) {\n      answerIds.push(\"recipe\");\n    }\n\n    // loop through all their answers\n    for (let sel of selection) {\n      // find the index of this answer's id in the list of correct answers\n      const index = answerIds.indexOf(sel.id); // return -1 if not found\n\n      // if the item is not a correct answer, set state to incorrect\n      if (index === -1) {\n        setcheckWin(quizStateEnum.incorrect);\n        return;\n      }\n\n      // remove the answer from the list of correct answers\n      answerIds.splice(index, 1);\n    }\n\n    // if no correct answers left in the list, then correct\n    // otherwise, they missed one\n    setcheckWin(\n      answerIds.length === 0 ? quizStateEnum.correct : quizStateEnum.incorrect\n    );\n    if (answerIds.length === 0)\n      setTimeout(() => {\n        newQuestion();\n      }, 3000);\n  };\n\n  useEffect(checkAnswer, [\n    selection,\n    numberOfAnswers,\n    question.components,\n    question.recipe,\n  ]);\n\n  const addSelection = (option) => {\n    // if they have picked the right number of selections already\n    if (selection.length === numberOfAnswers) {\n      // loop through the selections and ensure none are undefined\n      for (let i = 0; i < selection.length; i++) {\n        // replace the first undefined selection with the new selection\n        if (selection[i] === undefined) {\n          setSelection((prev) => [\n            ...prev.slice(0, i),\n            option,\n            ...prev.slice(i + 1),\n          ]);\n          // exit the addSelection function\n          return;\n        }\n      }\n      // none were undefined, don't let them add the new item\n      return;\n    }\n\n    // otherwise they still have empty spaces in the selection to add\n    setSelection((prev) => [...prev, option]);\n  };\n\n  const removeSelection = (i) => {\n    setSelection((prev) => {\n      return [...prev.slice(0, i), undefined, ...prev.slice(i + 1)];\n    });\n  };\n\n  return (\n    <div className=\"quiz\">\n      <Question\n        item={question}\n        selection={selection}\n        onSelectionRemove={removeSelection}\n      />\n      <hr />\n      <Options options={question.options} onOptionClick={addSelection} />\n      <Messages visible={visible} isCorrect={isCorrect} />\n    </div>\n  );\n};\n\nexport default Quiz;\n","import './App.css';\nimport Quiz from \"./quiz\";\n\nconst App = () => (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}